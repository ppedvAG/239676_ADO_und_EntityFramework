@page "/"
@using YummyInMyTummy.Model.Domain;
@using YummyInMyTummy.Model.Contracts;
@using System.Linq.Dynamic.Core
@inject IUnitOfWork repo;
@rendermode InteractiveServer

<PageTitle>Food</PageTitle>

<h1>Food</h1>

<RadzenButton Click="@LoadFood">Load Food</RadzenButton>

<RadzenDataGrid @ref="grid" AllowSorting="true" AllowFiltering="true" Data="@foods" Count="@foodCount" TItem="Food" LoadData="@LoadData">
    <Columns>
        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
            <Template Context="data">
                <RadzenLink Path="@("/Order/"+data.Id)">➕</RadzenLink>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Name" TItem="Food" Property="Name" />
        <RadzenDataGridColumn Title="Preis" TItem="Food" Property="Preis" />
        <RadzenDataGridColumn Title="KCal" TItem="Food" Property="KCal" />
    </Columns>
</RadzenDataGrid>


@code {

    IEnumerable<Food> foods;
    int foodCount;

    RadzenDataGrid<Food> grid = new RadzenDataGrid<Food>();

    void LoadFood()
    {
        grid.Reload();
    }

    void LoadData(LoadDataArgs args)
    {
        var query = repo.FoodRepo.Query();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }

        foodCount = query.Count();
        foods = query.ToList();
    }

    protected override void OnInitialized()
    {
        LoadData(new LoadDataArgs());
    }
}
